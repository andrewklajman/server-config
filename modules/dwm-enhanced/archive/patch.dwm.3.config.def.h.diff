--- a/config.def.h
+++ b/config.def.h
@@ -1,9 +1,10 @@
 /* See LICENSE file for copyright and license details. */
+#include <X11/XF86keysym.h>
 
 /* appearance */
-static const unsigned int borderpx  = 1;        /* border pixel of windows */
+static const unsigned int borderpx  = 0;        /* border pixel of windows */
 static const unsigned int snap      = 32;       /* snap pixel */
-static const int showbar            = 1;        /* 0 means no bar */
+static const int showbar            = 0;        /* 0 means no bar */
 static const int topbar             = 1;        /* 0 means bottom bar */
 static const char *fonts[]          = { "monospace:size=10" };
 static const char dmenufont[]       = "monospace:size=10";
@@ -26,15 +27,16 @@
 	 *	WM_CLASS(STRING) = instance, class
 	 *	WM_NAME(STRING) = title
 	 */
-	/* class      instance    title       tags mask     switchtotag    isfloating   monitor */
-	{ "Gimp",     NULL,       NULL,       0,            0,             1,           -1 },
-	{ "Firefox",  NULL,       NULL,       1 << 8,       0,             0,           -1 },
+	/* class              instance    title       tags mask     switchtotag    isfloating   monitor */
+ 	{ "scratch",          NULL,       NULL,       0,            0,             1,           -1 },
+ 	{ "Chromium-browser", NULL,       NULL,       1 << 7,       1,             0,           -1 },
+ 	{ "cmus",             NULL,       NULL,       1 << 8,       0,             0,           -1 },
 };
 
 /* layout(s) */
 static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
 static const int nmaster     = 1;    /* number of clients in master area */
-static const int resizehints = 1;    /* 1 means respect size hints in tiled resizals */
+static const int resizehints = 0;    /* 1 means respect size hints in tiled resizals */
 static const int lockfullscreen = 1; /* 1 will force focus on the fullscreen window */
 
 static const Layout layouts[] = {
@@ -58,10 +60,31 @@
 /* commands */
 static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
 static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };
-static const char *termcmd[]  = { "st", NULL };
+static const char *termcmd[]  = { "st", NULL };
+static const char *shortcut1[]  = { "shortcut1", NULL };
+static const char *shortcut2[]  = { "shortcut2", NULL };
+static const char *shortcut3[]  = { "shortcut3", NULL };
+static const char *passmenulogin[]  = { "passmenulogin", "-i", NULL };
+static const char *passmenu[]  = { "passmenu", "-i", NULL };
+static const char *upvol[] = { "amixer", "set", "Master", "5%+", NULL };
+static const char *downvol[] = { "amixer", "set", "Master", "5%-", NULL };
+static const char *mutevol[] = { "amixerl", "set", "Master", "toggle", NULL };
+static const char *light_up[] =   {"light", "-A", "5", NULL};
+static const char *light_down[] = {"light", "-U", "5", NULL};
 
 static const Key keys[] = {
 	/* modifier                     key        function        argument */
+	{ MODKEY,                       XK_w,      spawn,          {.v = passmenulogin } },
+	{ MODKEY,                       XK_e,      spawn,          {.v = passmenu } },
+ 	{ MODKEY|ShiftMask,             XK_u,      spawn,          {.v = shortcut1 } },
+ 	{ MODKEY|ShiftMask,             XK_i,      spawn,          {.v = shortcut2 } },
+ 	{ MODKEY|ShiftMask,             XK_o,      spawn,          {.v = shortcut3 } },
+ 	{ 0,         XF86XK_AudioLowerVolume,      spawn,          {.v = downvol } },
+ 	{ 0,         XF86XK_AudioMute,             spawn,          {.v = mutevol } },
+ 	{ 0,         XF86XK_AudioRaiseVolume,      spawn,          {.v = upvol   } },
+ 	{ 0,         XF86XK_MonBrightnessUp,	     spawn,	         {.v = light_up} },
+ 	{ 0,         XF86XK_MonBrightnessDown,	   spawn,	         {.v = light_down} },
+
 	{ MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
 	{ MODKEY|ShiftMask,             XK_Return, spawn,          {.v = termcmd } },
 	{ MODKEY,                       XK_b,      togglebar,      {0} },
